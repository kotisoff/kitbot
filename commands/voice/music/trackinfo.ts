import {
  ActionRowBuilder,
  APIEmbedField,
  ButtonBuilder,
  ButtonStyle,
  CommandInteraction,
  RestOrArray
} from "discord.js";
import Command from "../../../core/Command";
import CommandOptions from "../../../core/Command/CommandOptions";
import CustomClient from "../../../core/CustomClient";
import { useMainPlayer, useQueue } from "discord-player";
import CommandEmbed from "../../../core/Command/CommandEmbed";
import LyricsCommand from "./lyrics";

export default class TrackInfoCommand extends Command {
  constructor() {
    super(new CommandOptions("trackinfo"));

    this.setDescription("–ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ –∏ —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å.");

    this.slashCommandInfo.addStringOption((o) =>
      o.setName("query").setDescription("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞/—Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ")
    );
  }

  async runSlash(
    interaction: CommandInteraction,
    client: CustomClient
  ): Promise<any> {
    const query = interaction.options.get("query")?.value as string | undefined;

    const queue = useQueue(interaction.guildId as string);

    const track = query
      ? (
          await useMainPlayer()
            .search(query)
            .catch(() => null)
        )?.tracks[0]
      : queue?.currentTrack;

    if (!track)
      return interaction.reply({
        embeds: [
          CommandEmbed.error(
            query
              ? "–¢—Ä–µ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
              : "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è."
          )
        ]
      });

    const fields: RestOrArray<APIEmbedField> = [
      {
        name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        value: query
          ? track.duration
          : queue?.node.createProgressBar() ?? track.duration
      }
    ];
    if (!query)
      fields.push({
        name: "–î–æ–±–∞–≤–ª–µ–Ω–æ",
        value: queue?.currentTrack?.requestedBy?.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      });

    const trackembed = CommandEmbed.blankEmbed()
      .setTitle(track.title)
      .setURL(track.url)
      .setThumbnail(track.thumbnail)
      .setAuthor({ name: track.author })
      .addFields(fields)
      .setColor("Random");

    const stream = await track.extractor?.stream(track);

    const buttonRow = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId("lyrics")
        .setEmoji("üìú")
        .setLabel("–¢–µ–∫—Å—Ç")
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setLabel(typeof stream == "string" ? "–°–∫–∞—á–∞—Ç—å" : "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫")
        .setStyle(ButtonStyle.Link)
        .setURL(typeof stream == "string" ? stream : track.url)
    );

    const reply = await interaction.reply({
      embeds: [trackembed],
      components: [buttonRow]
    });

    try {
      const button = await reply.awaitMessageComponent({
        time: 60_000
      });

      if (button.customId == "lyrics") {
        const lyricsCommand = client.getCommandByClass<LyricsCommand>(
          LyricsCommand.prototype
        );
        const trackName = track.title + " - " + track.author;
        lyricsCommand.run(await reply.fetch(), [trackName], client);
        button.update({});
      }
    } catch {}
  }
}
